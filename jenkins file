pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'mysonar'
    }        
    stages {
         stage ("Clean WS") {
            steps {
                cleanWs()
            }
         }
         stage ("code") {
              steps {
                  git "https://github.com/devops0014/Zomato-Project.git"
               }
          }
          stage("Sonarqube Analysis") {
              steps{
                  withSonarQubeEnv('mysonar') {
                      sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \
                      -Dsonar.projectKey=zomato'''
                  } 
              }
          } 
          stage("quality gates") {
              steps{
                  script {
                      waitForQualityGate abortPipeline: false, credentialsId: 'sonar-password'
                  }
              }
          }
          stage("node") {
              steps{
                  sh 'npm install'
              }
          }
          stage("OWASP") {
              steps {
                  dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dp-check'
                  dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
              }
          }
          stage("Build") {
             steps{
                  sh 'docker build -t image1 .'
              }
          }
          stage("Trivy"){
              steps {
                  sh 'trivy fs . >> trivyfs.txt'
              }
          }
          stage("Image Scan") {
              steps {
                  sh 'trivy image image1'
              }
          }
          stage("DockerHub") {
              steps {
                  script {
                      withDockerRegistry(credentialsId: 'docker-password') {
                          sh 'docker tag image1 vamsi17cts/mydockerproject:myzomatoimage'
                          sh 'docker push vamsi17cts/mydockerproject:myzomatoimage'
                      }      
                  }
              }
          }      
          stage ("container") {
              steps {
                  sh 'docker run -itd --name projectzomatoconta -p 1234:80 vamsi17cts/mydockerproject:myzomatoimage'
              }
          }
    }
    }
